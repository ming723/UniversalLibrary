/**
abnerlibrary使用说明
author:AbnerMing
主要功能：
        一、欢迎页显示
        二、主页Tab设置
        三、轮播图展示
        四、沉浸式状态
        五、手势解锁
        六、设置图片为圆形或者椭圆
        七、如何运用百分比进行适配
        八、各个工具类使用（log日志，网络判断，图形验证码实现，判断手机号，md5加密等）
        九、注解使用
        十、adapter使用（listview和recyclerview）
        十一、加载图片
        十二、下拉刷新，上拉加载
        十三、tab指示器的运用
        十四、Alert弹出框使用
        十五、百分比适配
        十六、联网使用（Rxjava+retrofit2,可设置缓存，菊花加载，上传下载均有）
        十七、数据库使用
        十八、父类继承使用

*/
一、进应用欢迎页显示

    xml布局：

       <com.abner.ming.abnerlibrary.viewpage.BGAGuideLinkageLayout
            style="@style/MatchMatch">
            <com.abner.ming.abnerlibrary.viewpage.BGABanner
                android:id="@+id/banner_guide_background"
                style="@style/MatchMatch"
                app:banner_pageChangeDuration="1000"
                app:banner_pointAutoPlayAble="false"
                app:banner_pointContainerBackground="@android:color/transparent"
                app:banner_pointDrawable="@drawable/bga_banner_selector_point_hollow"
                app:banner_pointTopBottomMargin="15dp"
                app:banner_transitionEffect="fade"/>
        </com.abner.ming.abnerlibrary.viewpage.BGAGuideLinkageLayout>

    代码：

         mForegroundBanner.setEnterSkipViewIdAndDelegate(R.id.btn_guide_enter, R.id.tv_guide_skip, new BGABanner.GuideDelegate() {
                    @Override
                    public void onClickEnterOrSkip() {
                        startActivity(new Intent(SplashActivity.this, GestureMainActivity.class));
                        finish();
                    }
        });

              // Bitmap 的宽高在 maxWidth maxHeight 和 minWidth minHeight 之间
               BGALocalImageSize localImageSize = new BGALocalImageSize(720, 1280, 320, 640);
               // 设置数据源
               mBackgroundBanner.setData(localImageSize, ImageView.ScaleType.CENTER_CROP,
                       R.drawable.uoko_guide_background_1,
                       R.drawable.uoko_guide_background_2,
                       R.drawable.uoko_guide_background_3);

二、主页Tab设置：

    xml布局：

      <com.abner.ming.abnerlibrary.tabview.TabView
          android:id="@+id/tabview"
          android:layout_width="match_parent"
          android:layout_height="match_parent"/>

     代码：

                List<TabViewChild> tabViewChildList = new ArrayList<>();
                TabViewChild tabViewChild01 = new TabViewChild(R.mipmap.ic_launcher, R.mipmap.ic_launcher, "首页", new HomeFragment());
                TabViewChild tabViewChild02 = new TabViewChild(R.mipmap.ic_launcher, R.mipmap.ic_launcher, "自选", new HomeFragment());
                TabViewChild tabViewChild03 = new TabViewChild(R.mipmap.ic_launcher, R.mipmap.ic_launcher, "我的", new HomeFragment());
                tabViewChildList.add(tabViewChild01);
                tabViewChildList.add(tabViewChild02);
                tabViewChildList.add(tabViewChild03);
                mTabView.setTabViewChild(tabViewChildList, getSupportFragmentManager());
                mTabView.setOnTabChildClickListener(new TabView.OnTabChildClickListener() {
                    @Override
                    public void onTabChildClick(int position, ImageView currentImageIcon, TextView currentTextView) {

                    }
                });

三、轮播图展示：

    xml布局展示：

            <com.abner.ming.abnerlibrary.viewpage.BGABanner
                android:id="@+id/bgabanner"
                android:layout_width="match_parent"
                android:layout_height="200dp"
                app:banner_transitionEffect="cube"
                />
     代码：

             BGABanner mBGABanner=(BGABanner)v.findViewById(R.id.bgabanner);
                    mBGABanner.setAutoPlayAble(true);

                    mBGABanner.setAdapter(this);

                    ArrayList<String> imageList=new ArrayList<>();
                    imageList.add("http://7xk9dj.com1.z0.glb.clouddn.com/banner/imgs/12.png");
                    imageList.add("http://7xk9dj.com1.z0.glb.clouddn.com/banner/imgs/13.png");
                    imageList.add("http://7xk9dj.com1.z0.glb.clouddn.com/banner/imgs/14.png");
                    ArrayList<String> textList=new ArrayList<>();
                    textList.add("111111111111111");
                    textList.add("222222222222222");
                    textList.add("333333333333333");
                    mBGABanner.setData(imageList, textList);

              @Override
                public void fillBannerItem(BGABanner banner, View itemView, @Nullable Object model, int position) {
            //        Glide.with(itemView.getContext())
            //                .load(model)
            //                .apply(new RequestOptions().placeholder(R.drawable.holder).error(R.drawable.holder).dontAnimate().centerCrop())
            //                .into(itemView);
                    Log.i("fillBannerItem",model.toString());
                    Picasso.with(getActivity()).load(model.toString()).into((ImageView)itemView);

                    Picasso.with(getActivity()).load(R.drawable.a_1).fit().into((ImageView) itemView);
                }

四、沉浸式状态：
            1.自定义颜色的状态栏和导航栏

                    在 onCreate() 方法中：
                                UltimateBar.newColorBuilder()
                                        .statusColor(statusColor)       // 状态栏颜色
                                        .statusDepth(50)                // 状态栏颜色深度
                                        .applyNav(true)                 // 是否应用到导航栏
                                        .navColor(navColor)             // 导航栏颜色
                                        .navDepth(50)                   // 导航栏颜色深度
                                        .build(this)
                                        .apply();

                    如果不需要设置颜色深度：

                                UltimateBar.newColorBuilder()
                                        .statusColor(statusColor)   // 状态栏颜色
                                        .applyNav(true)             // 是否应用到导航栏
                                        .navColor(navColor)         // 导航栏颜色
                                        .build(this)
                                        .apply();


            2.半透明状态栏和导航栏

                    在 onCreate() 方法中：

                                UltimateBar.newTransparentBuilder()
                                        .statusColor(Color.BLUE)        // 状态栏颜色
                                        .statusAlpha(100)               // 状态栏透明度
                                        .applyNav(true)                 // 是否应用到导航栏
                                        .navColor(Color.GREEN)          // 导航栏颜色
                                        .navAlpha(100)                  // 导航栏透明度
                                        .build(this)
                                        .apply();

                    如果仅需要设置状态栏的半透明效果：

                                UltimateBar.newTransparentBuilder()
                                        .statusColor(Color.BLUE)        // 状态栏颜色
                                        .statusAlpha(100)               // 状态栏透明度
                                        .applyNav(false)                // 是否应用到导航栏
                                        .build(this)
                                        .apply();

            3.沉浸式状态栏和导航栏：

                                在 onCreate() 方法中：

                                            UltimateBar.newImmersionBuilder()
                                                    .applyNav(true)         // 是否应用到导航栏
                                                    .build(this)
                                                    .apply();



            4.隐藏状态栏和导航栏：

            在 onWindowFocusChanged() 方法中：

                        @Override
                        public void onWindowFocusChanged(boolean hasFocus) {
                            super.onWindowFocusChanged(hasFocus);
                            if (hasFocus) {
                                UltimateBar.newHideBuilder()
                                        .applyNav(true)     // 是否应用到导航栏
                                        .build(this)
                                        .apply();
                            }
                        }


            5.在 DrawerLayout 中设置自定义颜色的状态栏和导航栏：

                    首先需要设置 DrawerLayout 下面的主局部中添加 android:fitsSystemWindows="true"：

                                <android.support.v4.widget.DrawerLayout
                                    xmlns:android="http://schemas.android.com/apk/res/android"
                                    android:id="@+id/drawer_layout"
                                    android:layout_width="match_parent"
                                    android:layout_height="match_parent"
                                    android:fitsSystemWindows="false">

                                    <LinearLayout
                                        android:layout_width="match_parent"
                                        android:layout_height="match_parent"
                                        android:orientation="vertical"
                                        android:fitsSystemWindows="true">

                                    </LinearLayout>

                                    <FrameLayout
                                        android:layout_width="match_parent"
                                        android:layout_height="match_parent"
                                        android:background="@color/SpringGreen"
                                        android:layout_gravity="left"
                                        android:fitsSystemWindows="false"/>

                                </android.support.v4.widget.DrawerLayout>
                    注意是 DrawerLayout 下面的主布局，DrawerLayout 本身和抽屉布局都不能添加。
                    然后在 onCreate() 方法中：

                                UltimateBar.newDrawerBuilder()
                                        .statusColor(color)     // 状态栏颜色
                                        .statusDepth(0)         // 状态栏颜色深度
                                        .applyNav(true)         // 是否应用到导航栏
                                        .navColor(color)        // 导航栏颜色
                                        .navDepth(0)            // 导航栏颜色深度
                                        .build(this)
                                        .apply();
五、手势解锁：

            具体代码可运行，打开GestureMainActivity进行查看.

六、设置图片为圆形或者椭圆

            使用XCRoundImageView来设置图片的形状：具体代码看类中描述

七、如何运用百分比进行适配

            具体可看percent下四个类：

            <com.abner.ming.myappli.PercentRelativeLayout
                  android:layout_width="match_parent"
                  android:layout_height="wrap_content">
                  <TextView
                      android:layout_width="wrap_content"
                      android:layout_height="wrap_content"
                      android:text="hello"
                      android:textColor="#000"
                      app:layout_marginLeftPercent="10%"
                      />
              </com.abner.ming.myappli.PercentRelativeLayout>

              具体属性有：

                    layout_widthPercent
                    layout_heightPercent
                    layout_marginPercent
                    layout_marginLeftPercent
                    layout_marginTopPercent
                    layout_marginRightPercent
                    layout_marginBottomPercent
                    layout_marginStartPercent
                    layout_marginEndPercent
                    layout_aspectRatio
八、各个工具类使用

            均在utils包下

九、注解使用

            在Activity中初始化ViewUtils.inject(this);，最好在父类中
            在Fragment中初始化ViewUtils.inject(getActivity(),view);

            控件注解：
                     @ViewInject(R.id.btn_demo1)
                     Button mButton;
            事件注解：
                    @OnClick(R.id.btn_demo1)
                    public void onClickDemo(View v){

           }

十、adapter使用

     1、使用listview可以继承UniversalAdapter

     2、使用recyclerview可以继承RecycAdapter

十一、加载图片

     Picasso.with(ctx)
     .load(url).fit().error(R.drawable.ic_launcher).placeholder(mImageView.getDrawable())
     .memoryPolicy(MemoryPolicy.NO_CACHE).into(mImageView);

十二、下拉刷新，上拉加载

    1、使用material包下MaterialRefreshLayout(使用于listview,recyclerview等各种layout)：

               <com.ming.abner.abnerming.layout.MaterialRefreshLayout
                    android:layout_width="match_parent"
                    android:layout_height="match_parent"
                    app:overlay="true"
                    app:isLoadMore="false"
                    app:progress_size_type="normal"
                    app:wave_color="#90ffffff"
                    app:wave_show="true"
                    app:progress_colors="@array/material_colors"
                    app:wave_height_type="normal"
                    android:id="@+id/materialrefreshlayout"
                    >

                    </com.ming.abner.abnerming.layout.MaterialRefreshLayout>


          mMaterialRefreshLayout.setMaterialRefreshListener(new MaterialRefreshListener() {
                    @Override
                    public void onRefresh(final MaterialRefreshLayout materialRefreshLayout) {

                    }

                    @Override
                    public void onRefreshLoadMore(MaterialRefreshLayout materialRefreshLayout) {

                    }
                });

    2、使用recy下：

            a、LinearLayoutManager：

               <com.jcodecraeer.xrecyclerview.XRecyclerView
                    android:id="@+id/recyclerview"
                    app:layout_behavior="@string/appbar_scrolling_view_behavior"
                    android:layout_width="fill_parent"
                    android:layout_height="fill_parent" />


              mRecyclerView = (XRecyclerView)this.findViewById(R.id.recyclerview);
                    LinearLayoutManager layoutManager = new LinearLayoutManager(this);
                    layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
                    mRecyclerView.setLayoutManager(layoutManager);

                    mRecyclerView.setRefreshProgressStyle(ProgressStyle.BallSpinFadeLoader);
                    mRecyclerView.setLoadingMoreProgressStyle(ProgressStyle.BallRotate);
                    mRecyclerView.setArrowImageView(R.drawable.iconfont_downgrey);

                    //添加头部
                    View header = LayoutInflater.from(this).inflate(R.layout.recyclerview_header, (ViewGroup)findViewById(android.R.id.content),false);
                    mRecyclerView.addHeaderView(header);

                    mRecyclerView.getDefaultFootView().setLoadingHint("自定义加载中提示");
                    mRecyclerView.getDefaultFootView().setNoMoreHint("自定义加载完毕提示");

                    final int itemLimit = 5;
                    // When the item number of the screen number is list.size-2,we call the onLoadMore
                    mRecyclerView.setLimitNumberToCallLoadMore(2);

                    mRecyclerView.setLoadingListener(new XRecyclerView.LoadingListener() {
                        @Override
                        public void onRefresh() {
                        }

                        @Override
                        public void onLoadMore() {
                    });

               b、GridLayoutManager

                 GridLayoutManager layoutManager = new GridLayoutManager(this,3);
                    mRecyclerView.setLayoutManager(layoutManager);

                    mRecyclerView.setRefreshProgressStyle(ProgressStyle.BallSpinFadeLoader);
                    mRecyclerView.setLoadingMoreProgressStyle(ProgressStyle.BallRotate);
                    mRecyclerView.setArrowImageView(R.drawable.iconfont_downgrey);

                    mRecyclerView.setLoadingListener(new XRecyclerView.LoadingListener() {
                        @Override
                        public void onRefresh() {

                        }

                        @Override
                        public void onLoadMore() {

                        }
                    });

                c.导航栏透明
                  mRecyclerView.setScrollAlphaChangeListener(new XRecyclerView.ScrollAlphaChangeListener() {
                            @Override
                            public void onAlphaChange(int alpha) {
                                alpha_title.getBackground().setAlpha(alpha);
                            }

                            @Override
                            public int setLimitHeight() {
                                return 1300;
                            }
                        });

十三、tab指示器的运用

                        <SlidingTabLayout
                           android:id="@+id/lv_video_sliding_tabs"
                           android:layout_width="match_parent"
                           android:layout_height="44dp"
                           android:background="@color/lv_backgroud_color_f7" />

                       <android.support.v4.view.ViewPager
                           android:id="@+id/lv_video_view_pager"
                           android:layout_width="match_parent"
                           android:layout_height="match_parent"
                           android:background="@color/white" />


                mSlidingTabLayout.setCustomTabView(R.layout.lv_tab_indicator, android.R.id.text1);
                    mSlidingTabLayout.setSelectedIndicatorColors(getResources().getColor(R.color.lv_text_content_color_d43c33));
                    mSlidingTabLayout.setViewPager(mViewPager);
                    mSlidingTabLayout.setLineStyle(1);
                    if (!TextUtils.isEmpty(videodesc)) {
                        videoDes.setText(videodesc);
                    }


                     class TabTitleFragmentAdapter extends FragmentPagerAdapter {// FragmentStatePagerAdapter
                            private Map<Integer, String> mFragmentTags;
                            private FragmentManager mFragmentManager;

                            public TabTitleFragmentAdapter(FragmentManager fm) {
                                super(fm);
                                mFragmentManager = fm;
                                mFragmentTags = new HashMap<Integer, String>();
                            }

                            @Override
                            public Fragment getItem(int position) {
                                Bundle bundle = null;
                                Fragment f = null;
                                switch (position) {
                                    case 0:
                                        bundle = new Bundle();
                                        bundle.putInt("liveType", 1);
                                        bundle.putInt("status", Integer.parseInt(videoId));
                                        bundle.putString("liveId", liveId);
                                        f = Fragment.instantiate(LiveZhengSchoolVideoActivity.this,
                                                LvProgramGuidesFragment.class.getName(), bundle);
                                        break;
                                    case 1:

                                        break;

                                }
                                DebugLog.i(LOGTAG, "getItem:" + f);
                                return f;

                            }

                            @Override
                            public CharSequence getPageTitle(int position) {
                                return CONTENT[position % CONTENT.length];
                            }

                            @Override
                            public int getCount() {

                                return CONTENT.length;
                            }

                            @Override
                            public Object instantiateItem(ViewGroup container, int position) {
                                Object obj = super.instantiateItem(container, position);
                                if (obj instanceof Fragment) {
                                    // record the fragment tag here.
                                    Fragment f = (Fragment) obj;
                                    String tag = f.getTag();
                                    mFragmentTags.put(position, tag);
                                }
                                return obj;
                            }

                            public Fragment getFragment(int position) {
                                String tag = mFragmentTags.get(position);
                                if (tag == null)
                                    return null;
                                return mFragmentManager.findFragmentByTag(tag);
                            }

                        }

十四、Alert使用（可自行定义或者修改）

    1、菊花加载（背景半透明）：
              new DialogLoading.Builder(MainActivity.this)
                                  .AlertBg()
                                  .show();
    2、菊花加载（背景透明）：
              new DialogLoading.Builder(MainActivity.this)
                                  .show();
    3、弹出框
              new AlertUtils.Builder(MainActivity.this)
                           .AlertBg()
                           .title("重要公告")
                           .desc("什么重要公告啊")
                           .setConfimListenr(new AlertUtils.Builder.OnConfimListener() {
                               @Override
                               public void confim() {

                               }
                           }).canceled().show();
                说明：

                    AlertBg：是否显示半透明
                    canceled:点击空白区域不隐藏

十五、百分比适配
       <com.abner.ming.myappli.PercentRelativeLayout
             android:layout_width="match_parent"
             android:layout_height="wrap_content">
             <TextView
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
                 android:text="hello"
                 android:textColor="#000"
                 app:layout_marginLeftPercent="10%"
                 />
         </com.abner.ming.myappli.PercentRelativeLayout>

        具体属性有：

              layout_widthPercent
              layout_heightPercent
              layout_marginPercent
              layout_marginLeftPercent
              layout_marginTopPercent
              layout_marginRightPercent
              layout_marginBottomPercent
              layout_marginStartPercent
              layout_marginEndPercent
              layout_aspectRatio

十六、联网使用（Rxjava+retrofit2,可设置缓存，菊花加载）

        联网主要包括：

            1.Retrofit+Rxjava+okhttp基本使用方法
            2.统一处理请求数据格式
            3.统一的ProgressDialog和回调Subscriber处理
            4.取消http请求
            5.预处理http请求
            6.返回数据的统一判断
            7.失败后的retry处理
            8.RxLifecycle管理生命周期，防止泄露
            9.文件上传下载(支持多文件，断点续传)
            10.Cache数据持久化和数据库（greenDao）两种缓存机制

         注意：依赖包后，如果有Error:Conflict with dependency 'com.google.code.findbugs:jsr305'这个错误
         记得在app的build.gradle中android中：
             configurations.all {
                 resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
             }

        初始化：RxRetrofitApp.init(this);

        封装后具体请求请查看net包下NetTestActivity

        获取字符串
         private void getString(){
                new HttpUtils(this,true,false).getString("/week/txt/week_day_news.txt", null, new HelperListener() {
                    @Override
                    public void httpSuccess(String message) {
                        tvMessage.setText(message);
                    }

                    @Override
                    public void httpFailure(String error) {

                    }
                });
            }

            获取javabean
            private void getJavaBean(){
                new HttpUtils(this).getJavaBean(WeekNewsBean.class, "/week/txt/week_day_news.txt", null, new HttpJavaBeanCallBackListener() {
                    @Override
                    public void success(IModel iModel) {
                        WeekNewsBean bean=(WeekNewsBean)iModel;
                        tvMessage.setText(bean.getDatas().size()+"");
                    }

                    @Override
                    public void failure(String error) {

                    }
                });
            }

十七、数据库使用
        请查看链接：http://blog.csdn.net/ss1168805219/article/details/53997860


十八、父类继承使用

        Activity不使用联网继承base下BaseActivity
        Activity使用联网继承base下BaseActivityHttp

        Fragment不使用联网继承base下BaseFragment
        Fragment使用联网继承base下BaseFragmentHttp






